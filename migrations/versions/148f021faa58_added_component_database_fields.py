"""Added component database fields
Revision ID: 148f021faa58
Revises: 891863379b53
Create Date: 2023-01-13 17:25:09.900000
"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "148f021faa58"
down_revision = ""
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    battery_type = postgresql.ENUM(
        "LITHIUM_ION", "LEAD_ACID", name="batterytype"
    )
    battery_type.create(op.get_bind())
    op.add_column(
        "energy_project_component",
        sa.Column("power", sa.Float(), nullable=False),
    )
    op.add_column(
        "energy_project_component",
        sa.Column("is_primary", sa.Boolean(), nullable=False),
    )
    op.add_column(
        "energy_project_component",
        sa.Column("price", sa.Float(), nullable=False),
    )
    op.add_column(
        "energy_project_component",
        sa.Column("blackout_threshold", sa.Float(), nullable=True),
    )
    op.add_column(
        "energy_project_component",
        sa.Column("injection_price", sa.Float(), nullable=True),
    )
    op.add_column(
        "energy_project_component",
        sa.Column("efficiency", sa.Float(), nullable=False),
    )
    op.add_column(
        "energy_project_component",
        sa.Column("fuel_cost", sa.Float(), nullable=False),
    )
    op.add_column(
        "energy_project_component",
        sa.Column("overheats", sa.Boolean(), nullable=False),
    )
    op.add_column(
        "energy_project_component",
        sa.Column("overheating_time", sa.Float(), nullable=True),
    )
    op.add_column(
        "energy_project_component",
        sa.Column("cooldown_time", sa.Float(), nullable=True),
    )
    op.add_column(
        "energy_project_component",
        sa.Column("capacity", sa.Float(), nullable=False),
    )
    op.add_column(
        "energy_project_component",
        sa.Column(
            "battery_type",
            sa.Enum("LITHIUM_ION", "LEAD_ACID", name="batterytype"),
            nullable=False,
        ),
    )
    op.add_column(
        "energy_project_component",
        sa.Column("base_soc", sa.Float(), nullable=False),
    )
    op.add_column(
        "energy_project_component",
        sa.Column("min_soc", sa.Float(), nullable=False),
    )
    op.add_column(
        "energy_project_component",
        sa.Column("max_soc", sa.Float(), nullable=False),
    )
    op.add_column(
        "energy_project_component",
        sa.Column("is_critical", sa.Boolean(), nullable=False),
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("energy_project_component", "is_critical")
    op.drop_column("energy_project_component", "max_soc")
    op.drop_column("energy_project_component", "min_soc")
    op.drop_column("energy_project_component", "base_soc")
    op.drop_column("energy_project_component", "battery_type")
    op.drop_column("energy_project_component", "capacity")
    op.drop_column("energy_project_component", "cooldown_time")
    op.drop_column("energy_project_component", "overheating_time")
    op.drop_column("energy_project_component", "overheats")
    op.drop_column("energy_project_component", "fuel_cost")
    op.drop_column("energy_project_component", "efficiency")
    op.drop_column("energy_project_component", "injection_price")
    op.drop_column("energy_project_component", "blackout_threshold")
    op.drop_column("energy_project_component", "price")
    op.drop_column("energy_project_component", "is_primary")
    op.drop_column("energy_project_component", "power")
    # ### end Alembic commands ###
